buildscript {
    ext {
        springBootVersion = '1.5.14.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath('info.solidsoft.gradle.pitest:gradle-pitest-plugin:0.32.0') {
            exclude(group: 'org.pitest')
        }
        classpath ('org.pitest:pitest-command-line:0.33')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'io.spring.dependency-management' version '1.0.3.RELEASE'
    id "info.solidsoft.pitest" version "1.3.0"
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '3.1.2'
    id 'org.sonarqube' version '2.6.2'
    id 'org.springframework.boot' version'1.5.12.RELEASE'
    id 'pmd'
}

group = 'uk.gov.hmcts.divorce'
version = '0.0.3'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'div-case-progression-service.jar'
}

checkstyle.toolVersion = '7.2'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

task smoke(type:GradleBuild) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests against a running Case Prgression Instance'

    tasks = ['enableSmokeTest','case-progression-automation-test:clean', 'case-progression-automation-test:test', 'case-progression-automation-test:aggregate']
}

task enableSmokeTest(){
    doFirst{
        project.ext.automatedTest = true
        project.ext.tags = 'test-type:smoke'
    }
}

task enableFunctionalTest(){
    doFirst{
        project.ext.automatedTest = true
        project.ext.tags = 'test-type:all'
    }
}

task functional(type:GradleBuild) {

    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests against a running Case Prgression Instance'

    tasks = ['enableFunctionalTest', 'case-progression-automation-test:clean', 'case-progression-automation-test:test', 'case-progression-automation-test:aggregate']
}

mainClassName = 'uk.gov.hmcts.reform.divorce.CaseProgressionApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    jcenter()

    maven { url 'https://artifactory.reform.hmcts.net/artifactory/libs-release' }
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.*']
    excludedClasses = ['uk.gov.hmcts.reform.divorce.health.*',
                       'uk.gov.hmcts.reform.divorce.common.*',
                       'uk.gov.hmcts.reform.divorce.transformservice.config.*',
                       'uk.gov.hmcts.reform.divorce.transformservice.domain.*',
                       'uk.gov.hmcts.reform.divorce.errorhandler.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
}

pmd {
    toolVersion = "5.8.1"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("ruleset.xml")
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def versions = [
        commonsCollections4: '4.1',
        commonsIO: '2.5',
        commonsLang3: '3.0',
        hmctsHttpProxy: '1.1.0',
        hmctsJavaLogging: '2.1.1',
        hmctsNotify: '3.8.0-RELEASE',
        jackson: '2.9.5',
        jaxRS: '2.0.1',
        lombok: '1.16.18',
        mapstruct: '1.2.0.CR2',
        nimbusJWT: '5.1',
        puppyCrawl: '7.6',
        restAssured: '3.0.3',
        serviceTokenGenerator: '0.6.0',
        springfoxSwagger: '2.6.1',
        springCloudWiremock: '1.2.4.RELEASE',
        uniRest: '1.4.9'
]

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: versions.uniRest
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: versions.nimbusJWT
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version:  versions.puppyCrawl
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile(group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger) {
        exclude(module: 'mapstruct')
    }

    compile group: 'uk.gov.hmcts.reform.divorce', name:'div-common-utils', version: '1.0.5'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: versions.commonsCollections4
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: versions.mapstruct
    compile group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: versions.hmctsHttpProxy
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.hmctsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.hmctsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.hmctsJavaLogging
    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify

    compile (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator){
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
    }

    testCompile group: 'commons-io', name: 'commons-io', version: versions.commonsIO
    testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloudWiremock
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    compileOnly group: 'org.mapstruct', name: 'mapstruct-processor', version: versions.mapstruct
    testCompile project(':test-support')
}

task printVersion {
    doLast {
        print project.version
    }
}

sonarqube {
    properties {
        property "sonar.exclusions", "**uk/gov/hmcts/reform/divorce/**/domain/**/*, " +
            "**uk/gov/hmcts/reform/divorce/pay/models/**/*, **uk/gov/hmcts/reform/divorce/fees/models/**/*," +
            "**uk/gov/hmcts/reform/divorce/pay/exceptions/**/*,**uk/gov/hmcts/reform/divorce/support/**/*"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco.exec"
        property "sonar.projectKey", "DivorceCaseProgressionService"
        property "sonar.projectName", "Divorce :: case-progression-service"
    }
}

task developAddRelaseSuffix() {
    version = "${version}-SNAPSHOT"
}

test {
    doFirst {
        project.ext.automatedTest = false
    }
}

jacocoTestReport {
    executionData(test)

    reports {
        xml {
            enabled true
        }

        html {
            enabled true
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
